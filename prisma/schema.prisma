// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id
  first_name   String?
  image_url    String?
  email        String?
  last_name    String?
  username     String?
  CommentVotes CommentVotes[]
  Comments     Comment[]
  Order        Order[]
  Reports      Report[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  price       Float
  description String
  cantidad    Int
  images      Image[]
  size        Size     @relation(fields: [sizeId], references: [id])
  sizeId      String
  color       Color    @relation(fields: [colorId], references: [id])
  colorId     String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
}

model Image {
  id        String   @id @default(uuid())
  url     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Size {
  id        String    @id @default(uuid())
  name      String    @unique
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(uuid())
  name      String    @unique
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Survey {
  id          String        @id @default(uuid())
  title       String
  option1Id   String        @default(uuid())
  option1     String
  vote1       Int
  option2Id   String        @default(uuid())
  option2     String
  vote2       Int
  SurveyVotes SurveyVotes[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model SurveyVotes {
  userId    String
  surveyId  String
  surevey   Survey   @relation(fields: [surveyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, surveyId])
}

model Comment {
  id     String  @id @default(uuid())
  body   String
  report Report? @relation(fields: [reportId], references: [id])
  reportId  String?

  vote CommentVotes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model CommentVotes {
  userId    String
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, commentId])
}

model Report {
  id          String        @id @default(uuid())
  title       String
  description String
  body        String        @db.Text
  imageUrl    String
  comments    Comment[]
  ReportVotes ReportVotes[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
}

model ReportVotes {
  userId    String
  reportId     String
  report    Report   @relation(fields: [reportId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, reportId])
}

model Team {
  id        String   @id @default(uuid())
  name      String   @unique
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Visiting  Match[]  @relation("Visiting")
  Local     Match[]  @relation("Local")
  Players   Player[]
}

model Match {
  id             String   @id @default(uuid())
  league         String
  date           DateTime
  stadium        String
  visitingGoals  Int      @default(0)
  localGoals     Int      @default(0)
  visitingTeam   Team     @relation("Visiting", fields: [visitingTeamId], references: [id])
  localTeam      Team     @relation("Local", fields: [localTeamId], references: [id])
  visitingTeamId String
  localTeamId    String
  isFinish       Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Player {
  id          String   @id @default(uuid())
  name        String   @unique
  age         Int
  description String
  imageUrl    String
  height      Float
  weight      Float
  dorsal      Int
  goals       Int      @default(0)
  assists     Int      @default(0)
  saves       Int      @default(0)
  position    String
  country     String   @default("Spain")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Team        Team    @relation(fields: [teamId], references: [id])
  teamId      String
}

model Order {
  id         String      @id @default(uuid())
  orderItems OrderItem[] // Relation to OrderItem model
  phone      String      @default("")
  address    String      @default("")
  isPaid     Boolean
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order    @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}
